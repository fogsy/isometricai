import { useMemo, useState } from 'react';
import UploadForm from './components/UploadForm';
import { DetectionResult } from './types';

function App() {
  const [result, setResult] = useState<DetectionResult | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleStart = () => {
    setLoading(true);
    setError(null);
    setResult(null);
  };

  const handleComplete = (payload: DetectionResult) => {
    setLoading(false);
    setResult(payload);
  };

  const handleError = (message: string) => {
    setLoading(false);
    setError(message);
  };

  const probability = useMemo(() => {
    if (!result) return null;
    return Math.round(result.score * 1000) / 10;
  }, [result]);

  return (
    <div className="app">
      <header>
        <h1>AI Media Authenticity Detector</h1>
        <p>Upload an image or video to estimate the likelihood it was generated by AI.</p>
      </header>
      <main>
        <UploadForm onStart={handleStart} onComplete={handleComplete} onError={handleError} />
        {loading && <p className="status">Running detectionâ€¦</p>}
        {error && <p className="status error">{error}</p>}
        {result && !loading && !error && (
          <section className="result">
            <h2>Detection Result</h2>
            <p>
              Confidence that media is synthetic: <strong>{probability}%</strong>
            </p>
            <p>
              Classification: <strong>{result.label.toUpperCase()}</strong>
            </p>
            <p>
              Model: {result.model_name} ({result.model_version})
            </p>
            {result.frames && result.frames.length > 0 && (
              <details>
                <summary>Frame Breakdown</summary>
                <table>
                  <thead>
                    <tr>
                      <th>#</th>
                      <th>Timestamp (s)</th>
                      <th>Score</th>
                    </tr>
                  </thead>
                  <tbody>
                    {result.frames.map((frame) => (
                      <tr key={frame.index}>
                        <td>{frame.index + 1}</td>
                        <td>{frame.timestamp.toFixed(2)}</td>
                        <td>{(frame.score * 100).toFixed(1)}%</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </details>
            )}
          </section>
        )}
      </main>
    </div>
  );
}

export default App;
